// scripts/verificacion-final-formularios.ts
import { createClient } from '@libsql/client'
import { db } from '../src/lib/db'

const tursoClient = createClient({
  url: process.env.TURSO_DATABASE_URL!,
  authToken: process.env.TURSO_AUTH_TOKEN!,
})

async function verificacionFinalFormularios() {
  console.log('üîç Verificaci√≥n final de formularios con Turso Cloud...')
  
  try {
    // Test 1: Verificar estructura de tabla formularios
    console.log('\n1. Verificando estructura de tabla formularios...')
    
    const estructura = await tursoClient.execute(`
      PRAGMA table_info(formularios)
    `)
    
    console.log('‚úÖ Estructura de tabla formularios:')
    estructura.rows.forEach(row => {
      console.log(`   - ${row.name}: ${row.type} ${row.notnull ? 'NOT NULL' : ''} ${row.pk ? 'PRIMARY KEY' : ''}`)
    })
    
    // Test 2: Verificar √≠ndices
    console.log('\n2. Verificando √≠ndices...')
    
    const indices = await tursoClient.execute(`
      SELECT name, sql FROM sqlite_master 
      WHERE type='index' AND tbl_name='formularios'
    `)
    
    console.log(`‚úÖ √çndices encontrados: ${indices.rows.length}`)
    indices.rows.forEach(row => {
      console.log(`   - ${row.name}`)
    })
    
    // Test 3: Verificar conteo actual de formularios
    console.log('\n3. Verificando datos existentes...')
    
    const conteoTotal = await db.formulario.count()
    console.log(`‚úÖ Total de formularios en base: ${conteoTotal}`)
    
    if (conteoTotal > 0) {
      const porTipo = await db.formulario.groupBy({
        by: ['tipo'],
        _count: { tipo: true }
      })
      
      console.log('   Distribuci√≥n por tipo:')
      porTipo.forEach(grupo => {
        console.log(`     - ${grupo.tipo}: ${grupo._count.tipo}`)
      })
      
      const porEstado = await db.formulario.groupBy({
        by: ['estado'],
        _count: { estado: true }
      })
      
      console.log('   Distribuci√≥n por estado:')
      porEstado.forEach(grupo => {
        console.log(`     - ${grupo.estado}: ${grupo._count.estado}`)
      })
    }
    
    // Test 4: Test de rendimiento con m√∫ltiples inserciones
    console.log('\n4. Testing rendimiento con m√∫ltiples formularios...')
    
    const startTime = Date.now()
    const formularios = []
    
    // Crear 10 formularios de prueba
    for (let i = 1; i <= 10; i++) {
      const formulario = await db.formulario.create({
        data: {
          tipo: i % 2 === 0 ? 'contacto' : 'cotizacion',
          nombre: `Usuario Test ${i}`,
          email: `test${i}@performance.com`,
          telefono: `+57 300 ${String(i).padStart(7, '0')}`,
          tipo_servicio: i % 2 === 1 ? 'remodelacion-integral' : undefined,
          descripcion: `Descripci√≥n de prueba n√∫mero ${i} para testing de rendimiento con Turso Cloud.`,
          ip: '127.0.0.1',
          recaptcha_score: 0.5 + (i * 0.05),
          estado: 'pendiente'
        }
      })
      formularios.push(formulario.id)
    }
    
    const endTime = Date.now()
    console.log(`‚úÖ 10 formularios creados en ${endTime - startTime}ms`)
    
    // Test 5: Test de consultas complejas
    console.log('\n5. Testing consultas complejas...')
    
    const consultaCompleja = await db.formulario.findMany({
      where: {
        AND: [
          { recaptcha_score: { gte: 0.7 } },
          { estado: 'pendiente' },
          {
            OR: [
              { tipo: 'contacto' },
              { tipo_servicio: { not: null } }
            ]
          }
        ]
      },
      orderBy: [
        { recaptcha_score: 'desc' },
        { fecha_envio: 'desc' }
      ],
      take: 5
    })
    
    console.log(`‚úÖ Consulta compleja ejecutada: ${consultaCompleja.length} resultados`)
    
    // Test 6: Test de transacciones
    console.log('\n6. Testing transacciones...')
    
    try {
      await db.$transaction(async (tx) => {
        const form1 = await tx.formulario.create({
          data: {
            tipo: 'contacto',
            nombre: 'Transacci√≥n Test 1',
            email: 'tx1@test.com',
            descripcion: 'Test de transacci√≥n 1',
            ip: '127.0.0.1',
            recaptcha_score: 0.8,
            estado: 'pendiente'
          }
        })
        
        const form2 = await tx.formulario.create({
          data: {
            tipo: 'cotizacion',
            nombre: 'Transacci√≥n Test 2',
            email: 'tx2@test.com',
            descripcion: 'Test de transacci√≥n 2',
            ip: '127.0.0.1',
            recaptcha_score: 0.9,
            estado: 'pendiente'
          }
        })
        
        formularios.push(form1.id, form2.id)
      })
      
      console.log('‚úÖ Transacci√≥n ejecutada correctamente')
    } catch (error) {
      console.error('‚ùå Error en transacci√≥n:', error)
    }
    
    // Test 7: Test de b√∫squeda de texto
    console.log('\n7. Testing b√∫squeda de texto...')
    
    const busquedaTexto = await db.formulario.findMany({
      where: {
        descripcion: {
          contains: 'Turso Cloud'
        }
      }
    })
    
    console.log(`‚úÖ B√∫squeda de texto: ${busquedaTexto.length} resultados`)
    
    // Test 8: Test de agregaciones
    console.log('\n8. Testing agregaciones...')
    
    const agregaciones = await db.formulario.aggregate({
      _count: { id: true },
      _avg: { recaptcha_score: true },
      _min: { fecha_envio: true },
      _max: { fecha_envio: true }
    })
    
    console.log('‚úÖ Agregaciones:')
    console.log(`   Total: ${agregaciones._count.id}`)
    console.log(`   Score promedio: ${agregaciones._avg.recaptcha_score?.toFixed(2)}`)
    console.log(`   Primer formulario: ${agregaciones._min.fecha_envio?.toISOString()}`)
    console.log(`   √öltimo formulario: ${agregaciones._max.fecha_envio?.toISOString()}`)
    
    // Test 9: Cleanup de datos de prueba
    console.log('\n9. Limpiando datos de prueba...')
    
    const eliminados = await db.formulario.deleteMany({
      where: {
        id: { in: formularios }
      }
    })
    
    console.log(`‚úÖ ${eliminados.count} formularios de prueba eliminados`)
    
    // Test 10: Verificaci√≥n final de integridad
    console.log('\n10. Verificaci√≥n final de integridad...')
    
    const verificacionIntegridad = await tursoClient.execute(`
      SELECT 
        COUNT(*) as total_formularios,
        COUNT(DISTINCT email) as emails_unicos,
        COUNT(CASE WHEN tipo = 'contacto' THEN 1 END) as contactos,
        COUNT(CASE WHEN tipo = 'cotizacion' THEN 1 END) as cotizaciones,
        COUNT(CASE WHEN estado = 'pendiente' THEN 1 END) as pendientes
      FROM formularios
    `)
    
    const stats = verificacionIntegridad.rows[0]
    console.log('‚úÖ Estad√≠sticas finales:')
    console.log(`   Total formularios: ${stats.total_formularios}`)
    console.log(`   Emails √∫nicos: ${stats.emails_unicos}`)
    console.log(`   Contactos: ${stats.contactos}`)
    console.log(`   Cotizaciones: ${stats.cotizaciones}`)
    console.log(`   Pendientes: ${stats.pendientes}`)
    
    console.log('\nüéâ Verificaci√≥n final completada exitosamente!')
    return true
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n final:', error)
    return false
  } finally {
    await db.$disconnect()
    tursoClient.close()
  }
}

async function main() {
  console.log('üß™ Iniciando verificaci√≥n final de formularios con Turso Cloud...\n')
  
  try {
    const resultado = await verificacionFinalFormularios()
    
    if (resultado) {
      console.log('\nüéâ VERIFICACI√ìN FINAL EXITOSA!')
      console.log('‚úÖ Los formularios est√°n completamente funcionales con Turso Cloud')
      console.log('‚úÖ La estructura de datos es correcta')
      console.log('‚úÖ El rendimiento es adecuado')
      console.log('‚úÖ Las consultas complejas funcionan')
      console.log('‚úÖ Las transacciones son estables')
      console.log('‚úÖ La integridad de datos est√° garantizada')
      console.log('\nüöÄ LISTO PARA PRODUCCI√ìN!')
      return true
    } else {
      console.log('\n‚ùå VERIFICACI√ìN FINAL FALL√ì')
      return false
    }
    
  } catch (error) {
    console.error('üí• Error en verificaci√≥n final:', error)
    return false
  }
}

main()
  .then(success => {
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error('üí• Verificaci√≥n final fall√≥:', error)
    process.exit(1)
  })
